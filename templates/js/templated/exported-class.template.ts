import { template } from "lodash";

export default template(`
// Code generated by @open-rpc/client-generator DO NOT EDIT.
import * as jayson from "jayson/promise";
import ajv from "ajv";
import _ from "lodash";
import { MethodObject, ContentDescriptorObject } from "@open-rpc/meta-schema";
import { generateMethodParamId, MethodCallValidator } from "@open-rpc/schema-utils-js";

class ParameterValidationError extends Error {
  constructor(public message: string, public errors: ajv.ErrorObject[] | undefined | null) {
    super(message);
  }
}
<%= _.chain(typeDefs).values().uniqBy('typeName').map('typing').value().join('') %>
export default class <%= className %> {
  public rpc: jayson.Client;
  public methods: any[];
  private validator: ajv.Ajv;

  constructor(options: any) {
    this.openrpcDocuement = <%= JSON.stringify(openrpcDocument) %>;
    this.methods = <%= JSON.stringify(methods, undefined, "  ") %>;

    if (options.transport === undefined || options.transport.type === undefined) {
      throw new Error("Invalid constructor params");
    }
    this.rpc = (jayson.Client as any)[options.transport.type](options.transport);
    this.validator = new MethodCallValidator(this.openrpcDocument);
  }

  private request(methodName: string, params: any[]): Promise<any> {
    const methodObject = _.find(this.methods, ({name}) => name === methodName) as MethodObject;
    const openRpcMethodValidationErrors = this.validator.validate(methodName, params);
    if (openRpcMethodValidationErrors.length > 0) {
      return Promise.reject(openRpcMethodValidationErrors);
    }

    let rpcParams;
    if (methodObject.paramStructure && methodObject.paramStructure === "by-name") {
      rpcParams = _.zipObject(params, _.map(methodObject.params, "name"));
    } else {
      rpcParams = Array.from(arguments);
    }
    const result: any = this.rpc.request(methodName, rpcParams);
    return result.then((r: any) => r.result);
  }

  <% methods.forEach((method) => { %>
  /**
   * <%= method.summary %>
   */
  <%= getFunctionSignature(method, typeDefs) %> {
    return this.request("<%= method.name %>", Array.from(arguments));
  }
  <% }) %>
}
`);
